// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using booksite.data.Concrete.EfCore;

namespace booksite.data.Migrations
{
    [DbContext(typeof(BookContext))]
    [Migration("20221004113941_InitialCreate")]
    partial class InitialCreate
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.3")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("booksite.entity.Author", b =>
                {
                    b.Property<int>("AuthorId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ImageUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NameLastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.HasKey("AuthorId");

                    b.ToTable("Authors");

                    b.HasData(
                        new
                        {
                            AuthorId = 1,
                            ImageUrl = "A1.jpg",
                            NameLastName = "Charles Darwin"
                        },
                        new
                        {
                            AuthorId = 2,
                            ImageUrl = "A2.jpg",
                            NameLastName = "John Steinbeck"
                        },
                        new
                        {
                            AuthorId = 3,
                            ImageUrl = "A3.jpg",
                            NameLastName = "Fyodor Dostoyevski"
                        },
                        new
                        {
                            AuthorId = 4,
                            ImageUrl = "A4.jpg",
                            NameLastName = "Paulo Coelho"
                        },
                        new
                        {
                            AuthorId = 5,
                            ImageUrl = "A5.jpg",
                            NameLastName = "George Orwell"
                        });
                });

            modelBuilder.Entity("booksite.entity.Book", b =>
                {
                    b.Property<int>("BookId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AuthorId")
                        .HasColumnType("int");

                    b.Property<string>("BarcodeNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("DateAdded")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("getdate()");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FirstPrintDate")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ImageUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsApproved")
                        .HasColumnType("bit");

                    b.Property<bool>("IsHome")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.Property<int>("PageCount")
                        .HasColumnType("int");

                    b.Property<double?>("Price")
                        .HasColumnType("float");

                    b.Property<int>("PublisherId")
                        .HasColumnType("int");

                    b.Property<string>("Url")
                        .IsRequired()
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.HasKey("BookId");

                    b.HasIndex("AuthorId");

                    b.HasIndex("PublisherId");

                    b.ToTable("Books");

                    b.HasData(
                        new
                        {
                            BookId = 1,
                            AuthorId = 1,
                            BarcodeNumber = "9786051715308",
                            DateAdded = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "iyi bir kitap",
                            FirstPrintDate = "1998",
                            ImageUrl = "1.jpg",
                            IsApproved = true,
                            IsHome = false,
                            Name = "Türlerin Kökeni",
                            PageCount = 687,
                            Price = 53.0,
                            PublisherId = 1,
                            Url = "turlerin-kokeni"
                        },
                        new
                        {
                            BookId = 2,
                            AuthorId = 2,
                            BarcodeNumber = "9789755705859",
                            DateAdded = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "güzel kitap",
                            FirstPrintDate = "1995",
                            ImageUrl = "2.jpg",
                            IsApproved = true,
                            IsHome = false,
                            Name = "Fareler ve İnsanlar",
                            PageCount = 243,
                            Price = 45.0,
                            PublisherId = 2,
                            Url = "fareler-ve-insanlar"
                        },
                        new
                        {
                            BookId = 3,
                            AuthorId = 3,
                            BarcodeNumber = "9789754589023",
                            DateAdded = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "iyi bir kitap",
                            FirstPrintDate = "2014",
                            ImageUrl = "3.jpg",
                            IsApproved = true,
                            IsHome = false,
                            Name = "Suç ve Ceza",
                            PageCount = 256,
                            Price = 29.0,
                            PublisherId = 3,
                            Url = "suc-ceza"
                        },
                        new
                        {
                            BookId = 4,
                            AuthorId = 4,
                            BarcodeNumber = "9789750726439",
                            DateAdded = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "iyi bir kitap",
                            FirstPrintDate = "2019",
                            ImageUrl = "4.jpg",
                            IsApproved = true,
                            IsHome = false,
                            Name = "Simyacı ",
                            PageCount = 256,
                            Price = 85.0,
                            PublisherId = 4,
                            Url = "simyaci"
                        },
                        new
                        {
                            BookId = 5,
                            AuthorId = 5,
                            BarcodeNumber = "9789750719387",
                            DateAdded = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "iyi bir kitap",
                            FirstPrintDate = "2013",
                            ImageUrl = "5.jpg",
                            IsApproved = true,
                            IsHome = false,
                            Name = "Hayvan Çifliği",
                            PageCount = 256,
                            Price = 51.0,
                            PublisherId = 5,
                            Url = "hayvan-ciftligi"
                        });
                });

            modelBuilder.Entity("booksite.entity.BookCategory", b =>
                {
                    b.Property<int>("CategoryId")
                        .HasColumnType("int");

                    b.Property<int>("BookId")
                        .HasColumnType("int");

                    b.HasKey("CategoryId", "BookId");

                    b.HasIndex("BookId");

                    b.ToTable("BookCategory");

                    b.HasData(
                        new
                        {
                            CategoryId = 1,
                            BookId = 1
                        },
                        new
                        {
                            CategoryId = 2,
                            BookId = 1
                        },
                        new
                        {
                            CategoryId = 3,
                            BookId = 1
                        },
                        new
                        {
                            CategoryId = 1,
                            BookId = 2
                        },
                        new
                        {
                            CategoryId = 2,
                            BookId = 2
                        },
                        new
                        {
                            CategoryId = 3,
                            BookId = 2
                        },
                        new
                        {
                            CategoryId = 4,
                            BookId = 3
                        },
                        new
                        {
                            CategoryId = 3,
                            BookId = 4
                        },
                        new
                        {
                            CategoryId = 3,
                            BookId = 5
                        },
                        new
                        {
                            CategoryId = 1,
                            BookId = 5
                        });
                });

            modelBuilder.Entity("booksite.entity.Cart", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Carts");
                });

            modelBuilder.Entity("booksite.entity.CartItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("BookId")
                        .HasColumnType("int");

                    b.Property<int>("CartId")
                        .HasColumnType("int");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("BookId");

                    b.HasIndex("CartId");

                    b.ToTable("CartItems");
                });

            modelBuilder.Entity("booksite.entity.Category", b =>
                {
                    b.Property<int>("CategoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.Property<string>("Url")
                        .IsRequired()
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.HasKey("CategoryId");

                    b.ToTable("Categories");

                    b.HasData(
                        new
                        {
                            CategoryId = 1,
                            Name = "Roman",
                            Url = "roman"
                        },
                        new
                        {
                            CategoryId = 2,
                            Name = "Bilim",
                            Url = "bilim"
                        },
                        new
                        {
                            CategoryId = 3,
                            Name = "Felsefe",
                            Url = "felsefe"
                        },
                        new
                        {
                            CategoryId = 4,
                            Name = "Dünya Roman",
                            Url = "dunya-roman"
                        });
                });

            modelBuilder.Entity("booksite.entity.Order", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("City")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ConversationId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.Property<string>("Note")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("OrderDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("OrderNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("OrderState")
                        .HasColumnType("int");

                    b.Property<string>("PaymentId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("PaymentType")
                        .HasColumnType("int");

                    b.Property<string>("Phone")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Orders");
                });

            modelBuilder.Entity("booksite.entity.OrderItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("BookId")
                        .HasColumnType("int");

                    b.Property<int>("OrderId")
                        .HasColumnType("int");

                    b.Property<double>("Price")
                        .HasColumnType("float");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("BookId");

                    b.HasIndex("OrderId");

                    b.ToTable("OrderItem");
                });

            modelBuilder.Entity("booksite.entity.Publisher", b =>
                {
                    b.Property<int>("PublisherId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.HasKey("PublisherId");

                    b.ToTable("Publishers");

                    b.HasData(
                        new
                        {
                            PublisherId = 1,
                            Name = "Alfa Yayıncılık"
                        },
                        new
                        {
                            PublisherId = 2,
                            Name = "Sel Yayıncılık"
                        },
                        new
                        {
                            PublisherId = 3,
                            Name = "İş Bankası"
                        },
                        new
                        {
                            PublisherId = 4,
                            Name = "Can Yayınları"
                        },
                        new
                        {
                            PublisherId = 5,
                            Name = "Timas Yayınları"
                        });
                });

            modelBuilder.Entity("booksite.entity.Book", b =>
                {
                    b.HasOne("booksite.entity.Author", "Author")
                        .WithMany("Books")
                        .HasForeignKey("AuthorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("booksite.entity.Publisher", "Publisher")
                        .WithMany("Books")
                        .HasForeignKey("PublisherId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("booksite.entity.BookCategory", b =>
                {
                    b.HasOne("booksite.entity.Book", "Book")
                        .WithMany("BookCategories")
                        .HasForeignKey("BookId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("booksite.entity.Category", "Category")
                        .WithMany("BookCategories")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("booksite.entity.CartItem", b =>
                {
                    b.HasOne("booksite.entity.Book", "Book")
                        .WithMany()
                        .HasForeignKey("BookId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("booksite.entity.Cart", "Cart")
                        .WithMany("CartItems")
                        .HasForeignKey("CartId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("booksite.entity.OrderItem", b =>
                {
                    b.HasOne("booksite.entity.Book", "Book")
                        .WithMany()
                        .HasForeignKey("BookId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("booksite.entity.Order", "Order")
                        .WithMany("OrderItems")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
